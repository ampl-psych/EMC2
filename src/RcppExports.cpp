// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// sp_new
Rcpp::List sp_new(const int iter, const arma::cube& lambda_varimax, const int q, const int p, const int dim_all_c, const arma::mat& all_c, const arma::mat& lambda_hat, const arma::uvec& st, arma::mat cost_matrix, arma::mat perm);
RcppExport SEXP _EMC2_sp_new(SEXP iterSEXP, SEXP lambda_varimaxSEXP, SEXP qSEXP, SEXP pSEXP, SEXP dim_all_cSEXP, SEXP all_cSEXP, SEXP lambda_hatSEXP, SEXP stSEXP, SEXP cost_matrixSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type lambda_varimax(lambda_varimaxSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type dim_all_c(dim_all_cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type all_c(all_cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type st(stSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type cost_matrix(cost_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_new(iter, lambda_varimax, q, p, dim_all_c, all_c, lambda_hat, st, cost_matrix, perm));
    return rcpp_result_gen;
END_RCPP
}
// calculate_subject_means
arma::mat calculate_subject_means(const Rcpp::List& group_designs, const arma::colvec& params, const int n_subjects, const int n_pars);
RcppExport SEXP _EMC2_calculate_subject_means(SEXP group_designsSEXP, SEXP paramsSEXP, SEXP n_subjectsSEXP, SEXP n_parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type group_designs(group_designsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_subjects(n_subjectsSEXP);
    Rcpp::traits::input_parameter< const int >::type n_pars(n_parsSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_subject_means(group_designs, params, n_subjects, n_pars));
    return rcpp_result_gen;
END_RCPP
}
// dlba
NumericVector dlba(NumericVector t, NumericVector A, NumericVector b, NumericVector v, NumericVector sv, bool posdrift);
RcppExport SEXP _EMC2_dlba(SEXP tSEXP, SEXP ASEXP, SEXP bSEXP, SEXP vSEXP, SEXP svSEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sv(svSEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(dlba(t, A, b, v, sv, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// plba
NumericVector plba(NumericVector t, NumericVector A, NumericVector b, NumericVector v, NumericVector sv, bool posdrift);
RcppExport SEXP _EMC2_plba(SEXP tSEXP, SEXP ASEXP, SEXP bSEXP, SEXP vSEXP, SEXP svSEXP, SEXP posdriftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sv(svSEXP);
    Rcpp::traits::input_parameter< bool >::type posdrift(posdriftSEXP);
    rcpp_result_gen = Rcpp::wrap(plba(t, A, b, v, sv, posdrift));
    return rcpp_result_gen;
END_RCPP
}
// dWald
NumericVector dWald(NumericVector t, NumericVector v, NumericVector B, NumericVector A, NumericVector t0);
RcppExport SEXP _EMC2_dWald(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(dWald(t, v, B, A, t0));
    return rcpp_result_gen;
END_RCPP
}
// pWald
NumericVector pWald(NumericVector t, NumericVector v, NumericVector B, NumericVector A, NumericVector t0);
RcppExport SEXP _EMC2_pWald(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(pWald(t, v, B, A, t0));
    return rcpp_result_gen;
END_RCPP
}
// dEXGrace
NumericVector dEXGrace(NumericMatrix dt, NumericVector mu, NumericVector sigma, NumericVector tau, double min_ll);
RcppExport SEXP _EMC2_dEXGrace(SEXP dtSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP min_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type min_ll(min_llSEXP);
    rcpp_result_gen = Rcpp::wrap(dEXGrace(dt, mu, sigma, tau, min_ll));
    return rcpp_result_gen;
END_RCPP
}
// stopfn_exg
NumericVector stopfn_exg(NumericVector t, NumericVector mu, NumericVector sigma, NumericVector tau, double SSD, double min_ll);
RcppExport SEXP _EMC2_stopfn_exg(SEXP tSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP SSDSEXP, SEXP min_llSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type SSD(SSDSEXP);
    Rcpp::traits::input_parameter< double >::type min_ll(min_llSEXP);
    rcpp_result_gen = Rcpp::wrap(stopfn_exg(t, mu, sigma, tau, SSD, min_ll));
    return rcpp_result_gen;
END_RCPP
}
// pEXG_old
NumericVector pEXG_old(NumericVector q, double mu, double sigma, double tau, bool lower_tail, bool log_p);
RcppExport SEXP _EMC2_pEXG_old(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pEXG_old(q, mu, sigma, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dEXG_old
NumericVector dEXG_old(NumericVector x, double mu, double sigma, double tau, bool log_d);
RcppExport SEXP _EMC2_dEXG_old(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dEXG_old(x, mu, sigma, tau, log_d));
    return rcpp_result_gen;
END_RCPP
}
// dEXGrace_old
NumericVector dEXGrace_old(NumericMatrix dt, NumericVector mu, NumericVector sigma, NumericVector tau);
RcppExport SEXP _EMC2_dEXGrace_old(SEXP dtSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(dEXGrace_old(dt, mu, sigma, tau));
    return rcpp_result_gen;
END_RCPP
}
// stopfn_exg_old
NumericVector stopfn_exg_old(NumericVector t, NumericVector mu, NumericVector sigma, NumericVector tau, double SSD);
RcppExport SEXP _EMC2_stopfn_exg_old(SEXP tSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP SSDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type SSD(SSDSEXP);
    rcpp_result_gen = Rcpp::wrap(stopfn_exg_old(t, mu, sigma, tau, SSD));
    return rcpp_result_gen;
END_RCPP
}
// pTEXG_vec
NumericVector pTEXG_vec(NumericVector q, double mu, double sigma, double tau, double lb, bool lower_tail, bool log_p);
RcppExport SEXP _EMC2_pTEXG_vec(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pTEXG_vec(q, mu, sigma, tau, lb, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dTEXG_vec
NumericVector dTEXG_vec(NumericVector x, double mu, double sigma, double tau, double lb, bool log_d);
RcppExport SEXP _EMC2_dTEXG_vec(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dTEXG_vec(x, mu, sigma, tau, lb, log_d));
    return rcpp_result_gen;
END_RCPP
}
// dTEXGrace
NumericVector dTEXGrace(NumericMatrix dt, NumericVector mu, NumericVector sigma, NumericVector tau, NumericVector lb);
RcppExport SEXP _EMC2_dTEXGrace(SEXP dtSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lb(lbSEXP);
    rcpp_result_gen = Rcpp::wrap(dTEXGrace(dt, mu, sigma, tau, lb));
    return rcpp_result_gen;
END_RCPP
}
// stopfn_texg
NumericVector stopfn_texg(NumericVector t, NumericVector mu, NumericVector sigma, NumericVector tau, NumericVector lb, double SSD);
RcppExport SEXP _EMC2_stopfn_texg(SEXP tSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP SSDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type SSD(SSDSEXP);
    rcpp_result_gen = Rcpp::wrap(stopfn_texg(t, mu, sigma, tau, lb, SSD));
    return rcpp_result_gen;
END_RCPP
}
// pEXG_RDEX
NumericVector pEXG_RDEX(NumericVector q, double mu, double sigma, double tau, bool lower_tail, bool log_p);
RcppExport SEXP _EMC2_pEXG_RDEX(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pEXG_RDEX(q, mu, sigma, tau, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dEXG_RDEX
NumericVector dEXG_RDEX(NumericVector x, double mu, double sigma, double tau, bool log_d);
RcppExport SEXP _EMC2_dEXG_RDEX(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dEXG_RDEX(x, mu, sigma, tau, log_d));
    return rcpp_result_gen;
END_RCPP
}
// dWald_RDEX_old
NumericVector dWald_RDEX_old(NumericVector t, double v, double B, double A, double t0);
RcppExport SEXP _EMC2_dWald_RDEX_old(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(dWald_RDEX_old(t, v, B, A, t0));
    return rcpp_result_gen;
END_RCPP
}
// dWald_RDEX
NumericVector dWald_RDEX(NumericVector t, double v, double B, double A, double t0, double s);
RcppExport SEXP _EMC2_dWald_RDEX(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(dWald_RDEX(t, v, B, A, t0, s));
    return rcpp_result_gen;
END_RCPP
}
// pWald_RDEX_old
NumericVector pWald_RDEX_old(NumericVector t, double v, double B, double A, double t0);
RcppExport SEXP _EMC2_pWald_RDEX_old(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    rcpp_result_gen = Rcpp::wrap(pWald_RDEX_old(t, v, B, A, t0));
    return rcpp_result_gen;
END_RCPP
}
// pWald_RDEX
NumericVector pWald_RDEX(NumericVector t, double v, double B, double A, double t0, double s);
RcppExport SEXP _EMC2_pWald_RDEX(SEXP tSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(pWald_RDEX(t, v, B, A, t0, s));
    return rcpp_result_gen;
END_RCPP
}
// pTEXG_RDEX
NumericVector pTEXG_RDEX(NumericVector q, double mu, double sigma, double tau, double lb, bool lower_tail, bool log_p);
RcppExport SEXP _EMC2_pTEXG_RDEX(SEXP qSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pTEXG_RDEX(q, mu, sigma, tau, lb, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// dTEXG_RDEX
NumericVector dTEXG_RDEX(NumericVector x, double mu, double sigma, double tau, double lb, bool log_d);
RcppExport SEXP _EMC2_dTEXG_RDEX(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP log_dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< bool >::type log_d(log_dSEXP);
    rcpp_result_gen = Rcpp::wrap(dTEXG_RDEX(x, mu, sigma, tau, lb, log_d));
    return rcpp_result_gen;
END_RCPP
}
// dRDEXrace_old
NumericVector dRDEXrace_old(NumericMatrix dt, double mu, double sigma, double tau, NumericVector v, NumericVector B, NumericVector A, NumericVector t0, bool exgWinner);
RcppExport SEXP _EMC2_dRDEXrace_old(SEXP dtSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP exgWinnerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< bool >::type exgWinner(exgWinnerSEXP);
    rcpp_result_gen = Rcpp::wrap(dRDEXrace_old(dt, mu, sigma, tau, v, B, A, t0, exgWinner));
    return rcpp_result_gen;
END_RCPP
}
// dRDEXrace
NumericVector dRDEXrace(NumericMatrix dt, double mu, double sigma, double tau, double lb, NumericVector v, NumericVector B, NumericVector A, NumericVector t0, NumericVector s, bool exgWinner);
RcppExport SEXP _EMC2_dRDEXrace(SEXP dtSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP sSEXP, SEXP exgWinnerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type exgWinner(exgWinnerSEXP);
    rcpp_result_gen = Rcpp::wrap(dRDEXrace(dt, mu, sigma, tau, lb, v, B, A, t0, s, exgWinner));
    return rcpp_result_gen;
END_RCPP
}
// stopfn_rdex_old
NumericVector stopfn_rdex_old(NumericVector t, int n_acc, double mu, double sigma, double tau, NumericVector v, NumericVector B, NumericVector A, NumericVector t0, double SSD);
RcppExport SEXP _EMC2_stopfn_rdex_old(SEXP tSEXP, SEXP n_accSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP SSDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type n_acc(n_accSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< double >::type SSD(SSDSEXP);
    rcpp_result_gen = Rcpp::wrap(stopfn_rdex_old(t, n_acc, mu, sigma, tau, v, B, A, t0, SSD));
    return rcpp_result_gen;
END_RCPP
}
// stopfn_rdex
NumericVector stopfn_rdex(NumericVector t, int n_acc, double mu, double sigma, double tau, double lb, NumericVector v, NumericVector B, NumericVector A, NumericVector t0, NumericVector s, double SSD);
RcppExport SEXP _EMC2_stopfn_rdex(SEXP tSEXP, SEXP n_accSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP lbSEXP, SEXP vSEXP, SEXP BSEXP, SEXP ASEXP, SEXP t0SEXP, SEXP sSEXP, SEXP SSDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type n_acc(n_accSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type SSD(SSDSEXP);
    rcpp_result_gen = Rcpp::wrap(stopfn_rdex(t, n_acc, mu, sigma, tau, lb, v, B, A, t0, s, SSD));
    return rcpp_result_gen;
END_RCPP
}
// fft_convolve_equiv_cpp
arma::vec fft_convolve_equiv_cpp(const arma::vec& x, const arma::vec& y, bool conj_flag);
RcppExport SEXP _EMC2_fft_convolve_equiv_cpp(SEXP xSEXP, SEXP ySEXP, SEXP conj_flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type conj_flag(conj_flagSEXP);
    rcpp_result_gen = Rcpp::wrap(fft_convolve_equiv_cpp(x, y, conj_flag));
    return rcpp_result_gen;
END_RCPP
}
// compute_gamma_diff_hrf
NumericVector compute_gamma_diff_hrf(double tr, int oversampling, double time_length, double onset, double delay, double undershoot, double dispersion, double u_dispersion, double ratio);
RcppExport SEXP _EMC2_compute_gamma_diff_hrf(SEXP trSEXP, SEXP oversamplingSEXP, SEXP time_lengthSEXP, SEXP onsetSEXP, SEXP delaySEXP, SEXP undershootSEXP, SEXP dispersionSEXP, SEXP u_dispersionSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tr(trSEXP);
    Rcpp::traits::input_parameter< int >::type oversampling(oversamplingSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< double >::type undershoot(undershootSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type u_dispersion(u_dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gamma_diff_hrf(tr, oversampling, time_length, onset, delay, undershoot, dispersion, u_dispersion, ratio));
    return rcpp_result_gen;
END_RCPP
}
// compute_hrf
NumericVector compute_hrf(double tr, int oversampling, double time_length, double onset, double delay, double undershoot, double dispersion, double u_dispersion, double ratio);
RcppExport SEXP _EMC2_compute_hrf(SEXP trSEXP, SEXP oversamplingSEXP, SEXP time_lengthSEXP, SEXP onsetSEXP, SEXP delaySEXP, SEXP undershootSEXP, SEXP dispersionSEXP, SEXP u_dispersionSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tr(trSEXP);
    Rcpp::traits::input_parameter< int >::type oversampling(oversamplingSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< double >::type undershoot(undershootSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type u_dispersion(u_dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_hrf(tr, oversampling, time_length, onset, delay, undershoot, dispersion, u_dispersion, ratio));
    return rcpp_result_gen;
END_RCPP
}
// compute_time_derivative
NumericVector compute_time_derivative(double tr, int oversampling, double time_length, double onset, double delay, double undershoot, double dispersion, double u_dispersion, double ratio, double delta);
RcppExport SEXP _EMC2_compute_time_derivative(SEXP trSEXP, SEXP oversamplingSEXP, SEXP time_lengthSEXP, SEXP onsetSEXP, SEXP delaySEXP, SEXP undershootSEXP, SEXP dispersionSEXP, SEXP u_dispersionSEXP, SEXP ratioSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tr(trSEXP);
    Rcpp::traits::input_parameter< int >::type oversampling(oversamplingSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< double >::type undershoot(undershootSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type u_dispersion(u_dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_time_derivative(tr, oversampling, time_length, onset, delay, undershoot, dispersion, u_dispersion, ratio, delta));
    return rcpp_result_gen;
END_RCPP
}
// build_hrf_kernel
NumericMatrix build_hrf_kernel(bool has_derivative, double tr, int oversampling, double time_length, double onset, double delay, double undershoot, double dispersion, double u_dispersion, double ratio);
RcppExport SEXP _EMC2_build_hrf_kernel(SEXP has_derivativeSEXP, SEXP trSEXP, SEXP oversamplingSEXP, SEXP time_lengthSEXP, SEXP onsetSEXP, SEXP delaySEXP, SEXP undershootSEXP, SEXP dispersionSEXP, SEXP u_dispersionSEXP, SEXP ratioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type has_derivative(has_derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type tr(trSEXP);
    Rcpp::traits::input_parameter< int >::type oversampling(oversamplingSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< double >::type undershoot(undershootSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type u_dispersion(u_dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    rcpp_result_gen = Rcpp::wrap(build_hrf_kernel(has_derivative, tr, oversampling, time_length, onset, delay, undershoot, dispersion, u_dispersion, ratio));
    return rcpp_result_gen;
END_RCPP
}
// construct_design_matrix
DataFrame construct_design_matrix(NumericVector frame_times, DataFrame events, bool has_derivative, double min_onset, int oversampling, double time_length, double onset, double delay, double undershoot, double dispersion, double u_dispersion, double ratio, bool add_intercept);
RcppExport SEXP _EMC2_construct_design_matrix(SEXP frame_timesSEXP, SEXP eventsSEXP, SEXP has_derivativeSEXP, SEXP min_onsetSEXP, SEXP oversamplingSEXP, SEXP time_lengthSEXP, SEXP onsetSEXP, SEXP delaySEXP, SEXP undershootSEXP, SEXP dispersionSEXP, SEXP u_dispersionSEXP, SEXP ratioSEXP, SEXP add_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type frame_times(frame_timesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_derivative(has_derivativeSEXP);
    Rcpp::traits::input_parameter< double >::type min_onset(min_onsetSEXP);
    Rcpp::traits::input_parameter< int >::type oversampling(oversamplingSEXP);
    Rcpp::traits::input_parameter< double >::type time_length(time_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type onset(onsetSEXP);
    Rcpp::traits::input_parameter< double >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< double >::type undershoot(undershootSEXP);
    Rcpp::traits::input_parameter< double >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type u_dispersion(u_dispersionSEXP);
    Rcpp::traits::input_parameter< double >::type ratio(ratioSEXP);
    Rcpp::traits::input_parameter< bool >::type add_intercept(add_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(construct_design_matrix(frame_times, events, has_derivative, min_onset, oversampling, time_length, onset, delay, undershoot, dispersion, u_dispersion, ratio, add_intercept));
    return rcpp_result_gen;
END_RCPP
}
// calc_ll
NumericVector calc_ll(NumericMatrix p_matrix, DataFrame data, NumericVector constants, List designs, String type, List bounds, List transforms, List pretransforms, CharacterVector p_types, double min_ll, List trend);
RcppExport SEXP _EMC2_calc_ll(SEXP p_matrixSEXP, SEXP dataSEXP, SEXP constantsSEXP, SEXP designsSEXP, SEXP typeSEXP, SEXP boundsSEXP, SEXP transformsSEXP, SEXP pretransformsSEXP, SEXP p_typesSEXP, SEXP min_llSEXP, SEXP trendSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p_matrix(p_matrixSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type constants(constantsSEXP);
    Rcpp::traits::input_parameter< List >::type designs(designsSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< List >::type bounds(boundsSEXP);
    Rcpp::traits::input_parameter< List >::type transforms(transformsSEXP);
    Rcpp::traits::input_parameter< List >::type pretransforms(pretransformsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type p_types(p_typesSEXP);
    Rcpp::traits::input_parameter< double >::type min_ll(min_llSEXP);
    Rcpp::traits::input_parameter< List >::type trend(trendSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ll(p_matrix, data, constants, designs, type, bounds, transforms, pretransforms, p_types, min_ll, trend));
    return rcpp_result_gen;
END_RCPP
}
// c_add_charvectors
CharacterVector c_add_charvectors(CharacterVector x, CharacterVector y);
RcppExport SEXP _EMC2_c_add_charvectors(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(c_add_charvectors(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EMC2_sp_new", (DL_FUNC) &_EMC2_sp_new, 10},
    {"_EMC2_calculate_subject_means", (DL_FUNC) &_EMC2_calculate_subject_means, 4},
    {"_EMC2_dlba", (DL_FUNC) &_EMC2_dlba, 6},
    {"_EMC2_plba", (DL_FUNC) &_EMC2_plba, 6},
    {"_EMC2_dWald", (DL_FUNC) &_EMC2_dWald, 5},
    {"_EMC2_pWald", (DL_FUNC) &_EMC2_pWald, 5},
    {"_EMC2_dEXGrace", (DL_FUNC) &_EMC2_dEXGrace, 5},
    {"_EMC2_stopfn_exg", (DL_FUNC) &_EMC2_stopfn_exg, 6},
    {"_EMC2_pEXG_old", (DL_FUNC) &_EMC2_pEXG_old, 6},
    {"_EMC2_dEXG_old", (DL_FUNC) &_EMC2_dEXG_old, 5},
    {"_EMC2_dEXGrace_old", (DL_FUNC) &_EMC2_dEXGrace_old, 4},
    {"_EMC2_stopfn_exg_old", (DL_FUNC) &_EMC2_stopfn_exg_old, 5},
    {"_EMC2_pTEXG_vec", (DL_FUNC) &_EMC2_pTEXG_vec, 7},
    {"_EMC2_dTEXG_vec", (DL_FUNC) &_EMC2_dTEXG_vec, 6},
    {"_EMC2_dTEXGrace", (DL_FUNC) &_EMC2_dTEXGrace, 5},
    {"_EMC2_stopfn_texg", (DL_FUNC) &_EMC2_stopfn_texg, 6},
    {"_EMC2_pEXG_RDEX", (DL_FUNC) &_EMC2_pEXG_RDEX, 6},
    {"_EMC2_dEXG_RDEX", (DL_FUNC) &_EMC2_dEXG_RDEX, 5},
    {"_EMC2_dWald_RDEX_old", (DL_FUNC) &_EMC2_dWald_RDEX_old, 5},
    {"_EMC2_dWald_RDEX", (DL_FUNC) &_EMC2_dWald_RDEX, 6},
    {"_EMC2_pWald_RDEX_old", (DL_FUNC) &_EMC2_pWald_RDEX_old, 5},
    {"_EMC2_pWald_RDEX", (DL_FUNC) &_EMC2_pWald_RDEX, 6},
    {"_EMC2_pTEXG_RDEX", (DL_FUNC) &_EMC2_pTEXG_RDEX, 7},
    {"_EMC2_dTEXG_RDEX", (DL_FUNC) &_EMC2_dTEXG_RDEX, 6},
    {"_EMC2_dRDEXrace_old", (DL_FUNC) &_EMC2_dRDEXrace_old, 9},
    {"_EMC2_dRDEXrace", (DL_FUNC) &_EMC2_dRDEXrace, 11},
    {"_EMC2_stopfn_rdex_old", (DL_FUNC) &_EMC2_stopfn_rdex_old, 10},
    {"_EMC2_stopfn_rdex", (DL_FUNC) &_EMC2_stopfn_rdex, 12},
    {"_EMC2_fft_convolve_equiv_cpp", (DL_FUNC) &_EMC2_fft_convolve_equiv_cpp, 3},
    {"_EMC2_compute_gamma_diff_hrf", (DL_FUNC) &_EMC2_compute_gamma_diff_hrf, 9},
    {"_EMC2_compute_hrf", (DL_FUNC) &_EMC2_compute_hrf, 9},
    {"_EMC2_compute_time_derivative", (DL_FUNC) &_EMC2_compute_time_derivative, 10},
    {"_EMC2_build_hrf_kernel", (DL_FUNC) &_EMC2_build_hrf_kernel, 10},
    {"_EMC2_construct_design_matrix", (DL_FUNC) &_EMC2_construct_design_matrix, 13},
    {"_EMC2_calc_ll", (DL_FUNC) &_EMC2_calc_ll, 11},
    {"_EMC2_c_add_charvectors", (DL_FUNC) &_EMC2_c_add_charvectors, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_EMC2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
