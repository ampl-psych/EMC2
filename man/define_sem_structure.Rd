% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/variant_SEM.R
\name{define_sem_structure}
\alias{define_sem_structure}
\title{Define Structural Equation Model (SEM) Matrices}
\usage{
define_sem_structure(
  data,
  design,
  subjects_col = "subjects",
  factor_names,
  covariate_cols = NULL,
  lambda_specs = NULL,
  b_specs = NULL,
  k_specs = NULL,
  g_specs = NULL,
  fixed_value = 0,
  free_value = Inf
)
}
\arguments{
\item{data}{A data frame containing subject identifiers and any covariate columns.}

\item{design}{An emc.design object, as created by the \code{design()} function.
The parameter names for the SEM are derived from \code{names(sampled_pars(design))}.}

\item{subjects_col}{Character string. The name of the subject identifier column
in \code{data}. Default is "subjects".}

\item{factor_names}{Character vector. Names of the latent factors for the SEM.}

\item{covariate_cols}{Character vector or NULL. Column names in \code{data} to be used
as covariates for K_mat and G_mat. If NULL, no covariates are processed.}

\item{lambda_specs}{A list defining \code{Lambda_mat} (factor loadings).
The list names should be factor names (from \code{factor_names}), and each element should be a
character vector of parameter names (from \code{names(sampled_pars(design))}) that load onto that factor.
Example: \code{list(Factor1 = c("v_Sleft", "a_Eneutral"), Factor2 = "t0")}}

\item{b_specs}{A list defining \code{B_mat} (regressions among factors).
List names are outcome factors, elements are character vectors of predictor factors.
Example: \code{list(Factor2 = "Factor1", Factor3 = c("Factor1", "Factor2"))}}

\item{k_specs}{A list defining \code{K_mat} (covariate effects on manifest design parameters).
List names are parameter names (from \code{names(sampled_pars(design))}), elements are character vectors of covariate names.
Example: \code{list(v_Sleft = "cov1", a_Eneutral = c("cov1", "cov2"))}}

\item{g_specs}{A list defining \code{G_mat} (covariate effects on factors).
List names are factor names, elements are character vectors of covariate names.
Example: \code{list(Factor1 = "cov1", Factor2 = c("cov1", "cov2"))}}

\item{fixed_value}{Numeric. The value used for fixed paths in the matrices (typically 0).
Default is 0.}

\item{free_value}{Numeric. The value used for paths specified as free to be estimated
(typically Inf).
Default is Inf.}
}
\value{
A list containing:
\itemize{
\item \code{Lambda_mat}: The factor loading matrix.
\item \code{B_mat}: The matrix of regressions among factors.
\item \code{K_mat}: The matrix of covariate effects on manifest design parameters.
\item \code{G_mat}: The matrix of covariate effects on factors.
\item \code{par_names}: The manifest design parameter names derived from \code{sampled_pars(design)}.
\item \code{factor_names}: The provided SEM factor names.
\item \code{covariate_names}: Character vector of covariate names that were
successfully processed and validated as being consistent per subject.
\item \code{subject_level_covariates}: A data frame with one row per subject and columns
for each validated covariate, containing the unique subject-level values.
}
}
\description{
This function helps create the specification matrices (Lambda, B, K, G) for an SEM.
It takes a design object, factor names, covariate names, and list-based
specifications for the paths to be estimated.
The manifest variable names for Lambda_mat and K_mat rows are derived from \code{sampled_pars(design)}.
It also validates that covariates are consistent per subject and returns an aggregated
subject-level covariate data frame.
}
\examples{
# Ensure the LBA model and forstmann data are available (from your package or example setup)
# Assuming LBA() is a function that returns model definition like in design.R
# And forstmann is a data frame.

# Example: Create a design object (simplified from design.R example)
if (requireNamespace("EMC2", quietly = TRUE) && exists("forstmann") && exists("LBA")) {
  ADmat <- matrix(c(-1/2,1/2),ncol=1,dimnames=list(NULL,"diff"))
  matchfun_example <- function(d) d$S==d$lR # Example match function

  example_design_obj <- design(
    data = EMC2::forstmann,
    model= EMC2::LBA,
    matchfun=matchfun_example,
    formula=list(v~lM,sv~lM,B~E+lR,A~1,t0~1),
    contrasts=list(v=list(lM=ADmat)),
    constants=c(sv=log(1)),
    report_p_vector = FALSE # To avoid printing summary during example
  )
  # Expected sampled_pars: v, v_lMdiff, B, B_Eneutral, B_Eaccuracy, B_lRright, A, t0

  # SEM Factor names
  sem_factor_names <- c("Speed", "Caution")

  # Covariate columns from forstmann data (assuming they are subject-level or consistent)
  # For this example, let's imagine 'participant_ntrial' is a subject-level covariate
  # We would need to add it or ensure it is consistent for the example to run fully.
  # To make it runnable, let's simulate a subject-level covariate directly in the data.
  # In a real scenario, ensure covariates are truly subject-level or properly aggregated.
  
  # Make a copy of forstmann for example modification to avoid altering original
  forstmann_mod <- EMC2::forstmann
  forstmann_mod$subjects <- factor(forstmann_mod$subjects) # Ensure subjects is a factor
  # Create a dummy subject-level covariate 'SubjTrait'
  set.seed(123) # for reproducibility
  subj_trait_values <- stats::setNames(rnorm(length(levels(forstmann_mod$subjects))), 
                                      levels(forstmann_mod$subjects))
  forstmann_mod$SubjTrait <- subj_trait_values[forstmann_mod$subjects]

  my_cov_cols <- c("SubjTrait")

  # Specifications for SEM matrices (using names from sampled_pars(example_design_obj))
  # Note: names(sampled_pars(example_design_obj)) would give actual parameter names
  # For LBA example: c("v", "v_lMdiff", "B", "B_Eneutral", "B_Eaccuracy", "B_lRright", "A", "t0")

  lambda_example_specs <- list(
    Speed = c("v", "v_lMdiff"), 
    Caution = c("B", "B_Eneutral", "B_Eaccuracy", "B_lRright", "A") 
  )

  b_example_specs <- list(Caution = "Speed")

  k_example_specs <- list(t0 = "SubjTrait") # e.g., t0 parameter affected by SubjTrait

  g_example_specs <- list(Speed = "SubjTrait") # e.g., Speed factor affected by SubjTrait

  sem_definition <- define_sem_structure(
    data = forstmann_mod,
    design = example_design_obj,
    subjects_col = "subjects",
    factor_names = sem_factor_names,
    covariate_cols = my_cov_cols,
    lambda_specs = lambda_example_specs,
    b_specs = b_example_specs,
    k_specs = k_example_specs,
    g_specs = g_example_specs
  )

  print(sem_definition$Lambda_mat)
  print(sem_definition$B_mat)
  print(sem_definition$K_mat)
  print(sem_definition$G_mat)
  print(sem_definition$covariate_names)
  print(head(sem_definition$subject_level_covariates))
} else {
  print("Skipping define_sem_structure example: EMC2 package, forstmann data, or LBA model not available.")
}

}
